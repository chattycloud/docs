{"pageProps":{"frontmatter":{"title":"Peer to Peer Chat","subtitle":"How to start chat with peer member id"},"headings":[{"depth":2,"value":"Step of connecting and using chat"},{"depth":3,"value":"1. useEffect of chat screen"},{"depth":3,"value":"2. Register callback function for chatty events"},{"depth":3,"value":"3. Send text or file message"},{"depth":2,"value":"Chatty Props"},{"depth":3,"value":"with"},{"depth":3,"value":"at"},{"depth":2,"value":"Chatty Callback"},{"depth":3,"value":"headerLeftOnPress"},{"depth":2,"value":"Need help?"}],"body":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var i=(e,s,t)=>s in e?l(e,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[s]=t,r=(e,s)=>{for(var t in s||(s={}))o.call(s,t)&&i(e,t,s[t]);if(n)for(var t of n(s))c.call(s,t)&&i(e,t,s[t]);return e},h=(e,s)=>d(e,g(s));var p=(e,s)=>{var t={};for(var a in e)o.call(e,a)&&s.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&n)for(var a of n(e))s.indexOf(a)<0&&c.call(e,a)&&(t[a]=e[a]);return t};const makeShortcode=e=>function(t){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",r({},t))},NextBlock=makeShortcode(\"NextBlock\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,s=p(a,[\"components\"]);return mdx(MDXLayout,h(r(r({},layoutProps),s),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Step of connecting and using chat\"),mdx(\"p\",null,\"Let's assume that user want to chat with touching chat icon button at other person's profile screen.\"),mdx(\"p\",null,\"If init function is completed with success each other, both of them are ready to join chat.\"),mdx(\"p\",null,\"Then as below, navigate to following Chat.js screen with 'with' param that indicates peer member id.\"),mdx(\"h3\",null,\"1. useEffect of chat screen\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`\n// Chat.js file that you generated\n\nimport Chatty from 'chatty-client';\n\n...\n\nconst ChattyChat = (props: ChatProps) => {\n  const [chatty, setChatty] = React.useState<Chatty>(new Chatty(props.chattylist));\n\n  ...\n\n  /**\n   * @description\n   * when chat is connected, call fetchMessages method\n   * parameter is boolean type. to refresh set to true\n   */\n  React.useEffect(() => {\n    connected && pullToRefresh && chatty?.fetchMessages(true);\n  }, [pullToRefresh, connected]);\n\n\n  /**\n   * @description\n   * Fist of all, register callback function for chatty events\n   * and then call connectChat method\n   * \n   * Payload of connectChat method\n   * at: chat id when coming from chatlist\n   * with: peer member id. use when selecing member instead of selecting chat\n   * distinctKey: this makes chat unique. it is generated automatically by sdk if undefined, specify null to allow duplicate and can assign your own value\n   * group: value for grouping chatlist \n   * name: specify chat name\n   * image: specify chat image\n   */\n  React.useEffect(() => {\n    chatty.onChatConnect(onChatConnect);\n    chatty.onMessagesFetch(onMessagesFetch);\n    chatty.onMessagesUpdate(onMessagesUpdate);\n    chatty.onMessageReceive(onMessageReceive);\n    chatty.onMessageSend(onMessageSend);\n    chatty.onChatRefresh(onChatRefresh);\n    chatty.connectChat({\n      at: props.at,\n      with: props.with,\n      distinctKey: props.distinctKey,\n      group: props.group,\n      name: props.name,\n      image: props.image\n    });\n\n    return () => {\n      chatty.disconnectChat();\n    }\n  }, []);\n\n  ...\n\n  return (\n    // render chat ui \n  );\n}\n\n`)),mdx(\"h3\",null,\"2. Register callback function for chatty events\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`\n// Chat.js file that you generated\n\nimport Chatty from 'chatty-client';\n\n...\n\nconst ChattyChat = (props: ChatProps) => {\n  const [chatty, setChatty] = React.useState<Chatty>(new Chatty(props.chattylist));\n\n  ...\n\n  /**\n   * @description define callback function called after chat is connected\n   * @param chat chat data when chat connection is success\n   * @param error error data when chat connection is failed\n   * @returns \n   */\n  const onChatConnect = (chat: ChattyTypes.ChatConnectResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !chat) {\n      console.warn('onChatConnect error', error);\n      setPullToRefresh(false);\n      return;\n    }\n\n    setChat(chat);\n    setConnected(true);\n  };\n\n  /**\n   * @description define callback function called after fetching recent messages, it is called after fetchMessages method of Chatty class\n   * @param data recent messages when fetching messages is success\n   * @param error error data when fetching messages is failed\n   * @returns \n   */\n  const onMessagesFetch = (data: ChattyTypes.MessagesFetchResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !data) {\n      console.warn('onMessagesFetch error', error);\n      return;\n    }\n    if (data.refresh) {\n      const messagesMap = new Map(data.messages.map((e) => [e['id'], e]));\n      setMessages(messagesMap);\n      setHasNext(data.hasNext);\n      setPullToRefresh(false);\n    } else {\n      setMessages((oldMessages) => {\n        const messagesMap = new Map(data.messages.map((e) => [e['id'], e]));\n        return new Map([...Array.from(oldMessages), ...Array.from(messagesMap)]);\n      });\n      setHasNext(data.hasNext);\n    }\n    // setLoading(false);\n  };\n\n  /**\n   * @description define callback function called when receive UPDATE_MESSAGES event. mainly updated message status i.e readReceipt\n   * @param messages messages updated when success\n   * @param error error data when failed\n   * @returns \n   */\n  const onMessagesUpdate = (messages: ChattyTypes.MessagesUpdateResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !messages) {\n      console.warn('onMessagesUpdate error', error);\n      return;\n    }\n\n    setMessages((oldMessages) => {\n      const messagesMap = new Map(messages.map((e) => [e['id'], e]));\n      return new Map([...Array.from(oldMessages), ...Array.from(messagesMap)]);\n    });\n\n  };\n\n  /**\n   * @description define callback function called when receive new message (NEW_MESSAGE event)\n   * @param message message when receving message is success\n   * @param error error data when failed\n   * @returns \n   */\n  const onMessageReceive = (message: ChattyTypes.MessageReceiveResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !message) {\n      console.warn('onMessageReceive error', error);\n      return;\n    }\n\n    setMessages((oldMessages) => {\n      const messageMap = new Map([[message['id'], message]]);\n      return new Map([...Array.from(messageMap), ...Array.from(oldMessages)]);\n    });\n  };\n\n  /**\n   * @description define callback function called when send message (SEND_MESSAGE event)\n   * @param message message when sending message is success \n   * @param error  error data when failed\n   * @returns \n   */\n  const onMessageSend = (message: ChattyTypes.MessageSendResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !message) {\n      console.warn('onMessageSend error', error);\n      return;\n    }\n\n    setMessages((oldMessages) => {\n      const messageMap = new Map([[message['id'], message]]);\n      return new Map([...Array.from(oldMessages), ...Array.from(messageMap)]);\n    });\n  };\n\n  /**\n   * @description define callback function called when chat is refreshed (REFRESH_CHAT event). mainly updated when chat member changed\n   * @param chat chat data when refreshing chat is success\n   * @param error error data when failed\n   * @returns \n   */\n  const onChatRefresh = (chat: ChattyTypes.ChatRefreshResponseType, error: ChattyTypes.ErrorResponseType) => {\n    if (error || !chat) {\n      console.warn('onChatUpdate error', error);\n      return;\n    }\n    setChat(chat);\n  }\n\n  ...\n\n  return (\n    // render chat ui \n  );\n}\n\n`)),mdx(\"h3\",null,\"3. Send text or file message\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`\n// Chat.js file that you generated\n\nimport Chatty from 'chatty-client';\n\n...\n\nconst ChattyChat = (props: ChatProps) => {\n  const [chatty, setChatty] = React.useState<Chatty>(new Chatty(props.chattylist));\n\n  ...\n\n  /**\n   * @description function to call sendTextMessage method when send text message\n   * @param message text mesage data\n   */\n  const sendTextMessage = (message: string) => {\n    const newMessage = chatty?.sendTextMessage(message);\n    if (newMessage) {\n      setMessages((oldMessages) => {\n        const messageMap = new Map([[newMessage['id'], newMessage]]);\n        return new Map([...Array.from(messageMap), ...Array.from(oldMessages)]);\n      });\n      toTop();\n    } else {\n      console.debug('sendTextMessage fail');\n    }\n  }\n\n  /**\n   * @description function to call sendFileMessage method when send file message\n   * @param message file message data\n   */\n  const sendFileMessage = (message: Array<ChattyTypes.FileType>) => {\n    const newMessage = chatty?.sendFileMessage(message);\n\n    if (newMessage) {\n      setMessages((oldMessages) => {\n        const messageMap = new Map([[newMessage['id'], newMessage]]);\n        return new Map([...Array.from(messageMap), ...Array.from(oldMessages)]);\n      });\n      toTop();\n    } else {\n      console.debug('sendFileMessage fail');\n    }\n  }\n\n  ...\n\n  return (\n    // render chat ui \n  );\n}\n\n`)),mdx(\"p\",null,`Congratulations!  Now you can send messages and receive mesages with chatty default ui components\nIs it's design not satisfied with you? Don't worry about it. You can customize it fully.\nFirst of all, look into available parameter list of Chatty React native element.`),mdx(\"h2\",null,\"Chatty Props\"),mdx(\"h3\",null,\"with\"),mdx(\"p\",null,\"the peer member id to want to chat\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Type: string\"),mdx(\"li\",{parentName:\"ul\"},\"Default: undefined\")),mdx(\"h3\",null,\"at\"),mdx(\"p\",null,\"chat id to enter existing chat\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Type: string\"),mdx(\"li\",{parentName:\"ul\"},\"Default: undefined\")),mdx(\"h2\",null,\"Chatty Callback\"),mdx(\"h3\",null,\"headerLeftOnPress\"),mdx(\"p\",null,\"onPress callback of left component in Chatty Header\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Type: string\"),mdx(\"li\",{parentName:\"ul\"},\"Default: undefined\")),mdx(\"h2\",null,\"Need help?\"),mdx(\"p\",null,\"Get help from \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.chatty-cloud.com/support\"}),\"ChattyCloud's support team\"),\", or join our \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://github.com/chatty-cloud/beta/discussions\"}),\"GitHub Discussion board\"),\" to see how others are using ChattyCloud.\"),mdx(NextBlock,{steps:[{text:\"Listing Chats\",link:\"/getting-started/listing-chats\"}],mdxType:\"NextBlock\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"getting-started/p2p","lastUpdatedOn":"2022-05-19T16:11:02.161Z"}},"__N_SSG":true}